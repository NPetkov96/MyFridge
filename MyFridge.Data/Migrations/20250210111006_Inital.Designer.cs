// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyFridge.Data;

#nullable disable

namespace MyFridge.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250210111006_Inital")]
    partial class Inital
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MyFridge.Data.Models.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("MyFridge.Data.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Categories")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Quantity")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bd99667c-3aeb-40b9-9590-b53599a5c9f7"),
                            Categories = 0,
                            IsDeleted = false,
                            Name = "Apple",
                            Notes = "Fresh and juicy apples",
                            Quantity = 5.0
                        },
                        new
                        {
                            Id = new Guid("57286e97-0a7b-4225-a0f3-4499d58fac29"),
                            Categories = 0,
                            IsDeleted = false,
                            Name = "Banana",
                            Notes = "Ripe bananas",
                            Quantity = 6.0
                        },
                        new
                        {
                            Id = new Guid("f63ecbf3-7089-4e53-9d82-49d0a0efb415"),
                            Categories = 1,
                            IsDeleted = false,
                            Name = "Carrot",
                            Notes = "Organic carrots",
                            Quantity = 10.0
                        },
                        new
                        {
                            Id = new Guid("f4eb169a-5894-43b0-8427-acdaa4e0221e"),
                            Categories = 1,
                            IsDeleted = false,
                            Name = "Broccoli",
                            Notes = "Fresh green broccoli",
                            Quantity = 2.0
                        },
                        new
                        {
                            Id = new Guid("4f2ee850-f944-454e-8c9f-6dc84a12ee0c"),
                            Categories = 2,
                            IsDeleted = false,
                            Name = "Milk",
                            Notes = "Full-fat milk",
                            Quantity = 2.0
                        },
                        new
                        {
                            Id = new Guid("655a4401-0234-47cc-8ac2-90946669d963"),
                            Categories = 2,
                            IsDeleted = false,
                            Name = "Cheese",
                            Notes = "Cheddar cheese block",
                            Quantity = 1.0
                        },
                        new
                        {
                            Id = new Guid("0425a159-c244-4fd1-84dc-a27466892376"),
                            Categories = 3,
                            IsDeleted = false,
                            Name = "Chicken Breast",
                            Notes = "Boneless skinless chicken breast",
                            Quantity = 2.0
                        },
                        new
                        {
                            Id = new Guid("7309db87-eefa-4a95-81ba-ad509f19d7c2"),
                            Categories = 3,
                            IsDeleted = false,
                            Name = "Ground Beef",
                            Notes = "Lean ground beef",
                            Quantity = 1.0
                        },
                        new
                        {
                            Id = new Guid("928d845f-e222-448e-b425-af700ff02d84"),
                            Categories = 4,
                            IsDeleted = false,
                            Name = "Salmon",
                            Notes = "Fresh Atlantic salmon fillet",
                            Quantity = 1.0
                        },
                        new
                        {
                            Id = new Guid("c8049172-15e5-4803-82e1-e924700a55e5"),
                            Categories = 5,
                            IsDeleted = false,
                            Name = "Rice",
                            Notes = "Basmati rice",
                            Quantity = 5.0
                        },
                        new
                        {
                            Id = new Guid("3c6c22e2-9e20-486b-84fb-35febc954f67"),
                            Categories = 5,
                            IsDeleted = false,
                            Name = "Pasta",
                            Notes = "Whole wheat pasta",
                            Quantity = 3.0
                        },
                        new
                        {
                            Id = new Guid("7c8b4d13-e2b4-40a0-a020-0df92bfca497"),
                            Categories = 6,
                            IsDeleted = false,
                            Name = "Orange Juice",
                            Notes = "100% fresh orange juice",
                            Quantity = 2.0
                        },
                        new
                        {
                            Id = new Guid("99cff922-cfad-4899-b3a8-bdefd6eac76d"),
                            Categories = 7,
                            IsDeleted = false,
                            Name = "Chocolate Bar",
                            Notes = "Dark chocolate 70%",
                            Quantity = 2.0
                        },
                        new
                        {
                            Id = new Guid("63fc94a1-d8e7-4eca-be83-ba4337d4d2f9"),
                            Categories = 8,
                            IsDeleted = false,
                            Name = "Frozen Peas",
                            Notes = "Organic frozen peas",
                            Quantity = 1.0
                        },
                        new
                        {
                            Id = new Guid("b2b5408a-30fd-4023-bd09-ab64dc650cce"),
                            Categories = 9,
                            IsDeleted = false,
                            Name = "Canned Tuna",
                            Notes = "Tuna in olive oil",
                            Quantity = 3.0
                        },
                        new
                        {
                            Id = new Guid("50013858-40fe-441c-9933-d2ff24e8992c"),
                            Categories = 10,
                            IsDeleted = false,
                            Name = "Salt",
                            Notes = "Sea salt",
                            Quantity = 1.0
                        },
                        new
                        {
                            Id = new Guid("50a05479-945f-4838-8fac-449b1dd0d71e"),
                            Categories = 11,
                            IsDeleted = false,
                            Name = "Ketchup",
                            Notes = "Organic tomato ketchup",
                            Quantity = 1.0
                        },
                        new
                        {
                            Id = new Guid("d4c31264-bba5-400c-97f8-559d779b091c"),
                            Categories = 12,
                            IsDeleted = false,
                            Name = "Bread",
                            Notes = "Whole grain bread",
                            Quantity = 1.0
                        },
                        new
                        {
                            Id = new Guid("eb330b9e-fe2f-4e29-b87c-ee8ad6e86308"),
                            Categories = 2,
                            IsDeleted = false,
                            Name = "Eggs",
                            Notes = "Free-range eggs",
                            Quantity = 12.0
                        },
                        new
                        {
                            Id = new Guid("b83e5f54-f1c9-4731-a08a-975636eae8ce"),
                            Categories = 2,
                            IsDeleted = false,
                            Name = "Butter",
                            Notes = "Unsalted butter",
                            Quantity = 1.0
                        });
                });

            modelBuilder.Entity("MyFridge.Data.Models.ShoppingList", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("ShoppingLists");
                });

            modelBuilder.Entity("MyFridge.Data.Models.ShoppingListProducts", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ShoppingListId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("ShoppingListId");

                    b.ToTable("ShoppingListProducts");
                });

            modelBuilder.Entity("MyFridge.Data.Models.UserProduct", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("UsersProducts");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("MyFridge.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("MyFridge.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyFridge.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("MyFridge.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyFridge.Data.Models.ShoppingList", b =>
                {
                    b.HasOne("MyFridge.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MyFridge.Data.Models.ShoppingListProducts", b =>
                {
                    b.HasOne("MyFridge.Data.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyFridge.Data.Models.ShoppingList", "ShoppingList")
                        .WithMany("ShoppingListProducts")
                        .HasForeignKey("ShoppingListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("ShoppingList");
                });

            modelBuilder.Entity("MyFridge.Data.Models.UserProduct", b =>
                {
                    b.HasOne("MyFridge.Data.Models.Product", "Product")
                        .WithMany("UserProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyFridge.Data.Models.ApplicationUser", "User")
                        .WithMany("UserProducts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MyFridge.Data.Models.ApplicationUser", b =>
                {
                    b.Navigation("UserProducts");
                });

            modelBuilder.Entity("MyFridge.Data.Models.Product", b =>
                {
                    b.Navigation("UserProducts");
                });

            modelBuilder.Entity("MyFridge.Data.Models.ShoppingList", b =>
                {
                    b.Navigation("ShoppingListProducts");
                });
#pragma warning restore 612, 618
        }
    }
}
